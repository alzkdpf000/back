<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.back.mapper.doctor.DoctorMapper">
    <sql id="search">
        <where>
            <if test='doctorStatus != null and doctorStatus == "inactive"'>
                doctor_status = #{doctorStatus}
            </if>
            <if test='search.keyword !=null and search.keyword !=""'>
                and ( member_name like concat('%', #{search.keyword}, '%') or
                member_email like concat('%', #{search.keyword}, '%') or
                member_kakao_email like concat('%', #{search.keyword}, '%')
                )
            </if>
        </where>
    </sql>

    <sql id="searchDoctorList">
        <if test="search.keyword != null and search.keyword != ''">
            AND (
            m.member_name LIKE CONCAT('%', #{search.keyword}, '%') OR
            d.doctor_specialty LIKE CONCAT('%', #{search.keyword}, '%') OR
            h.hospital_name LIKE CONCAT('%', #{search.keyword}, '%')
            )
        </if>

        <if test="search.categories != null and search.categories.length > 0">
            AND d.doctor_specialty IN
            <foreach collection="search.categories" item="cat" open="(" separator="," close=")">
                #{cat}
            </foreach>
        </if>
    </sql>

    <insert id="insertDoctor" parameterType="com.example.back.dto.doctor.DoctorListDTO">
        insert into tbl_doctor (member_id,
                                doctor_license_number,
                                doctor_specialty,
                                hospital_id,
                                doctor_status)
        values (#{memberId},
                #{doctorLicenseNumber},
                #{doctorSpecialty},
                #{hospitalId},
                #{doctorStatus})
    </insert>
    <insert id="insertJoinDoctor" parameterType="com.example.back.dto.doctor.DoctorDTO" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_doctor (
            member_id,
            doctor_license_number,
            doctor_specialty,
            hospital_id
        )
        values (
                   #{memberId},
                   #{doctorLicenseNumber},
                   #{doctorSpecialty},
                   #{hospitalId}
               )
    </insert>
    <select id="selectDoctorList" resultType="com.example.back.dto.doctor.DoctorListDTO">
        SELECT
        d.member_id AS memberId,
        m.member_name AS memberName,
        m.member_kakao_profile_url AS memberKakaoProfileUrl,
        d.doctor_specialty AS doctorSpecialty,
        d.doctor_status AS doctorStatus,
        m.id AS id,
        m.created_datetime AS createdDatetime,
        m.updated_datetime AS updatedDatetime,
        h.hospital_name AS hospitalName,
        h.hospital_phone AS hospitalPhone,
        ha.road_address AS roadAddress,
        ha.detail_address AS detailAddress,
        (SELECT COUNT(*) FROM tbl_likes l WHERE l.doctor_id = d.member_id) AS likesCount,
        EXISTS(
        SELECT 1 FROM tbl_likes l
        WHERE l.doctor_id = d.member_id
        AND l.member_id = #{criteria.currentMemberId}
        ) AS liked
        FROM tbl_doctor d
        JOIN tbl_member m ON d.member_id = m.id
        JOIN tbl_hospital h ON d.hospital_id = h.id
        JOIN tbl_hospital_address ha ON h.id = ha.hospital_id
        WHERE d.doctor_status = 'ACTIVE'
        <include refid="searchDoctorList"/>
        ORDER BY
        likesCount DESC,        -- 좋아요 수 내림차순
        liked DESC,             -- 좋아요 수 같을경우 내가 좋아요 한 사람이 위로
        d.member_id DESC
        LIMIT #{criteria.rowCount} OFFSET #{criteria.offset}
    </select>

    <select id="selectCountAll" resultType="int">
        SELECT COUNT(*)
        FROM tbl_doctor d
        JOIN tbl_member m ON d.member_id = m.id
        JOIN tbl_hospital h ON d.hospital_id = h.id
        WHERE d.doctor_status = 'ACTIVE'
        <include refid="searchDoctorList"/>
    </select>

    <select id="selectDoctorDetailById" parameterType="long" resultType="com.example.back.dto.doctor.DoctorListDTO">
        SELECT
            d.member_id AS memberId,
            m.member_name AS memberName,
            m.member_kakao_profile_url AS memberKakaoProfileUrl,
            d.doctor_specialty AS doctorSpecialty,
            d.doctor_status AS doctorStatus,
            m.id AS id,
            m.created_datetime AS createdDatetime,
            m.updated_datetime AS updatedDatetime,
            h.id AS hospitalId,
            h.hospital_name AS hospitalName,
            h.hospital_phone AS hospitalPhone,
            ha.road_address AS roadAddress,
            ha.detail_address AS detailAddress,
            (SELECT COUNT(*) FROM tbl_likes l WHERE l.doctor_id = d.member_id) AS likesCount,
            EXISTS(
                SELECT 1 FROM tbl_likes l
                WHERE l.doctor_id = d.member_id
                  AND l.member_id = #{currentMemberId}
            ) AS liked
        FROM tbl_doctor d
                 JOIN tbl_member m ON d.member_id = m.id
                 JOIN tbl_hospital h ON d.hospital_id = h.id
                 JOIN tbl_hospital_address ha ON h.id = ha.hospital_id
        WHERE d.member_id = #{doctorId}
    </select>

    <select id="selectDoctorsByStatus">
        select id,
        member_email,
        member_name,
        member_phone,
        member_status,
        doctor_status,
        member_provider as provider,
        doctor_license_number,
        member_kakao_email,
        member_vita_amount,
        created_datetime
        from view_member_doctor
        <include refid="search"/>
        limit #{criteria.count} offset #{criteria.offset}

    </select>

    <select id="selectDoctorCountByStatus">
        select count(id)
        from view_member_doctor
        <include refid="search"/>
    </select>

    <select id="selectDoctorById">
        select vmd.id,
               vmd.member_email,
               vmd.member_name,
               vmd.member_phone,
               vmd.member_status,
               vmd.member_provider,
               vmd.member_kakao_email,
               vmd.member_vita_amount,
               vmd.created_datetime,
               vmd.doctor_status,
               vmd.doctor_license_number,
               vmd.doctor_specialty,
               th.hospital_name,
               th.hospital_phone,
               th.hospital_homepage_url,
               tha.road_address,
               tha.detail_address,
               tha.zip_code
        from view_member_doctor vmd
                 join tbl_hospital th
                      on vmd.hospital_id = th.id
                 join tbl_hospital_address tha on th.id = tha.hospital_id
        where vmd.id = #{doctorId}
    </select>
    <update id="updateDoctorStatusToApproved">
        update tbl_doctor
        set doctor_status = 'active'
        where member_id = #{doctorId}
    </update>
    <insert id="insertHospitalAddress" parameterType="com.example.back.dto.doctor.DoctorDTO">
        insert into tbl_hospital_address(hospital_id, road_address, detail_address, zip_code)
        values (#{hospitalId}, #{hospitalRoadAddress}, #{hospitalDetailAddress}, #{zipCode})
    </insert>
    <insert id="insertHospital" parameterType="com.example.back.dto.doctor.DoctorDTO" useGeneratedKeys="true" keyProperty="hospitalId">
        insert into tbl_hospital (hospital_name, hospital_phone)
        values (#{hospitalName}, #{hospitalPhone})
    </insert>
</mapper>