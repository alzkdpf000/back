<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.back.mapper.payment.PaymentMapper">
    <sql id="search">
        <if test="search.categories != null and search.categories.length gt 0 ">
            and
            <trim prefix="(" prefixOverrides="or" suffix=")">
                <foreach item="category" collection="search.categories">
                    or tp.payment_status = #{category}
                </foreach>
            </trim>
        </if>
        <if test='search.keyword != null and search.keyword !=""'>
            and (
            tm.member_email like concat('%', #{search.keyword}, '%') or
            tm.member_kakao_email like concat('%', #{search.keyword}, '%') or
            tm.member_name like concat('%', #{search.keyword}, '%') or
            tp.payment_transaction_id = #{search.keyword} or
            tvh.vita_history_product_name like concat('%', #{search.keyword}, '%')
            )
        </if>
    </sql>
    <select id="searchPayments">
        select
        tp.id,
        tm.member_email,
        tm.member_name,
        tm.member_provider,
        tm.member_kakao_email,
        tp.created_datetime,
        tp.payment_amount,
        tp.payment_method,
        tp.payment_transaction_id,
        tp.payment_status
        from tbl_member tm join tbl_payment tp on tm.id = tp.member_id
        <include refid="search"/>
        order by tp.id desc
        limit #{criteria.count} offset #{criteria.offset}
    </select>

    <select id="searchCountPayment">
        select
        count(tm.id)
        from tbl_member tm join tbl_payment tp on tm.id = tp.member_id
        join tbl_vita_history tvh on tp.id = tvh.payment_id
        <include refid="search"/>
    </select>

    <select id="searchPaymentAmount">
        select
        tp.payment_status,
        sum(tp.payment_amount) as payment_amount
        from tbl_member tm join tbl_payment tp on tm.id = tp.member_id
        join tbl_vita_history tvh on tp.id = tvh.payment_id
        <include refid="search"/>
        where
            tp.payment_status != 'pending'
        group by tp.payment_status
    </select>

    <!-- 결제 정보 인서트-->
    <insert id="insertPayment" parameterType="com.example.back.dto.payment.PaymentDTO" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tbl_payment (member_id, payment_method, payment_amount, payment_status, payment_transaction_id)
        VALUES (#{memberId}, #{paymentMethod}, #{paymentAmount}, #{paymentStatus}, #{paymentTransactionId})
    </insert>

    <!-- 결제 상태 업데이트 -->
    <update id="updatePaymentStatus">
        UPDATE tbl_payment
        SET payment_status = #{status},
            updated_datetime = NOW()
        WHERE payment_transaction_id = #{transactionId}
    </update>

    <!-- Vita 업데이트 -->
    <update id="updateMemberVita">
        UPDATE tbl_member
        SET member_vita_amount = member_vita_amount + #{amount},
            updated_datetime = NOW()
        WHERE id = #{memberId}
    </update>

    <!-- 회원별 결제 내역 전체 조회 -->
    <select id="paymentList" parameterType="long" resultType="com.example.back.dto.payment.PaymentDTO">
        SELECT
            id,
            member_id AS memberId,
            payment_method AS paymentMethod,
            payment_amount AS paymentAmount,
            payment_status AS paymentStatus,
            payment_transaction_id AS paymentTransactionId,
            created_datetime AS createdDatetime,
            updated_datetime AS updatedDatetime
        FROM tbl_payment
        WHERE member_id = #{memberId}
        ORDER BY created_datetime DESC
    </select>

</mapper>